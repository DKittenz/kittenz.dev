{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","className","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qOAaeA,G,UAVL,kBACT,yBAAKC,UAAU,OACd,4BAAQA,UAAU,cACjB,mDACA,wCACA,gCAAK,uBAAGC,KAAK,kDAAR,UAAL,MAA2E,uBAAGA,KAAK,mCAAR,WAA3E,MAAmI,uBAAGA,KAAK,+EAAR,WAAnI,MAAuO,uBAAGA,KAAK,2CAAR,oBAAvO,UCIiBC,QACU,cAA7BC,OAAOC,SAASC,UAEc,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACxB,2DCZHC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDuHpB,kBAAmBC,WACtBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GACnCA,EAAaC,gBACXC,OAAM,SAACC,GACTC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8296806a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nlet App = () => (\r\n\t<div className=\"App\">\r\n\t\t<header className=\"App-header\">\r\n\t\t\t<p>Website coming soon!</p>\r\n\t\t\t<p>My links:</p>\r\n\t\t\t<p>| <a href=\"https://www.roblox.com/users/325114244/profile\">Roblox</a> | <a href=\"https://twitter.com/Dev_Kittenz\">Twitter</a> | <a href=\"https://www.youtube.com/channel/UCkJ3idmj-K2YImynaB_dV5w?sub_confirmation=1\">YouTube</a> | <a href=\"https://devforum.roblox.com/t/--/728207\">Roblox Portfolio</a> |</p>\r\n\t\t</header>\r\n\t</div>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n\twindow.location.hostname === \"localhost\" ||\r\n\t\t// [::1] is the IPv6 localhost address.\r\n\t\twindow.location.hostname === \"[::1]\" ||\r\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\r\n\t\twindow.location.hostname.match(\r\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n\t\t)\r\n);\r\n\r\ntype Config = {\r\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport let register = (config?: Config) => {\r\n\tif (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n\t\t// The URL constructor is available in all browsers that support SW.\r\n\t\tconst publicUrl = new URL(\r\n\t\t\tprocess.env.PUBLIC_URL,\r\n\t\t\twindow.location.href\r\n\t\t);\r\n\t\tif (publicUrl.origin !== window.location.origin) {\r\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\r\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\r\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\twindow.addEventListener(\"load\", () => {\r\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n\t\t\tif (isLocalhost) {\r\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\r\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\r\n\r\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\r\n\t\t\t\t// service worker/PWA documentation.\r\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\r\n\t\t\t\t\t\t\t\"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Is not localhost. Just register service worker\r\n\t\t\t\tregisterValidSW(swUrl, config);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n};\r\n\r\nlet registerValidSW = (swUrl: string, config?: Config) => {\r\n\tnavigator.serviceWorker.register(swUrl).then((registration) => {\r\n\t\tregistration.onupdatefound = () => {\r\n\t\t\tconst installingWorker = registration.installing;\r\n\t\t\tif (installingWorker === null) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tinstallingWorker.onstatechange = () => {\r\n\t\t\t\tif (installingWorker.state === \"installed\") {\r\n\t\t\t\t\tif (navigator.serviceWorker.controller) {\r\n\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\r\n\t\t\t\t\t\t// but the previous service worker will still serve the older\r\n\t\t\t\t\t\t// content until all client tabs are closed.\r\n\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t\"New content is available and will be used when all \" +\r\n\t\t\t\t\t\t\t\"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t// Execute callback\r\n\t\t\t\t\t\tif (config && config.onUpdate) {\r\n\t\t\t\t\t\t\tconfig.onUpdate(registration);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// At this point, everything has been precached.\r\n\t\t\t\t\t\t// It's the perfect time to display a\r\n\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\r\n\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\r\n\r\n\t\t\t\t\t\t// Execute callback\r\n\t\t\t\t\t\tif (config && config.onSuccess) {\r\n\t\t\t\t\t\t\tconfig.onSuccess(registration);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t};\r\n\t}).catch((error) => {\r\n\t\tconsole.error(\"Error during service worker registration:\", error);\r\n\t});\r\n};\r\n\r\nlet checkValidServiceWorker = (swUrl: string, config?: Config) => {\r\n\t// Check if the service worker can be found. If it can't reload the page.\r\n\tfetch(swUrl, {\r\n\t\theaders: { \"Service-Worker\": \"script\" }\r\n\t}).then((response) => {\r\n\t\t// Ensure service worker exists, and that we really are getting a JS file.\r\n\t\tconst contentType = response.headers.get(\"content-type\");\r\n\t\tif (response.status === 404 || (contentType !== null && contentType.indexOf(\"javascript\") === -1)) {\r\n\t\t\t// No service worker found. Probably a different app. Reload the page.\r\n\t\t\tnavigator.serviceWorker.ready.then((registration) => {\r\n\t\t\t\tregistration.unregister().then(() => {\r\n\t\t\t\t\twindow.location.reload();\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\t// Service worker found. Proceed as normal.\r\n\t\t\tregisterValidSW(swUrl, config);\r\n\t\t}\r\n\t}).catch(() => {\r\n\t\tconsole.log(\"No internet connection found. App is running in offline mode.\");\r\n\t});\r\n};\r\n\r\nexport let unregister = () => {\r\n\tif (\"serviceWorker\" in navigator) {\r\n\t\tnavigator.serviceWorker.ready.then((registration) => {\r\n\t\t\tregistration.unregister();\r\n\t\t}).catch((error) => {\r\n\t\t\tconsole.error(error.message);\r\n\t\t});\r\n\t}\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}